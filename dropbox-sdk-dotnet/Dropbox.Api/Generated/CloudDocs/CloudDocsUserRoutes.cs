// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.CloudDocs.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.CloudDocs"/> namespace</para>
    /// </summary>
    public class CloudDocsUserRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CloudDocsUserRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal CloudDocsUserRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>Fetch the binary content of the requested document. This route requires Cloud
        /// Docs auth. Please make a request to cloud_docs/authorize and supply that token in
        /// the Authorization header.</para>
        /// </summary>
        /// <param name="getContentArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CloudDocsAccessError"/>.</exception>
        public t.Task GetContentAsync(GetContentArg getContentArg)
        {
            return this.Transport.SendDownloadRequestAsync<GetContentArg, enc.Empty, CloudDocsAccessError>(getContentArg, "content", "/cloud_docs/get_content", "user", global::Dropbox.Api.CloudDocs.GetContentArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.CloudDocs.CloudDocsAccessError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get content route.</para>
        /// </summary>
        /// <param name="getContentArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetContent(GetContentArg getContentArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetContentAsync(getContentArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Fetch the binary content of the requested document. This route requires Cloud
        /// Docs auth. Please make a request to cloud_docs/authorize and supply that token in
        /// the Authorization header.</para>
        /// </summary>
        /// <param name="fileId">The file id</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CloudDocsAccessError"/>.</exception>
        public t.Task GetContentAsync(string fileId)
        {
            var getContentArg = new GetContentArg(fileId);

            return this.GetContentAsync(getContentArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get content route.</para>
        /// </summary>
        /// <param name="fileId">The file id</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetContent(string fileId,
                                                sys.AsyncCallback callback,
                                                object callbackState = null)
        {
            var getContentArg = new GetContentArg(fileId);

            return this.BeginGetContent(getContentArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get content route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CloudDocsAccessError"/>.</exception>
        public void EndGetContent(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Fetches metadata associated with a Cloud Doc and user. This route requires
        /// Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that
        /// token in the Authorization header.</para>
        /// </summary>
        /// <param name="getMetadataArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetMetadataError"/>.</exception>
        public t.Task<GetMetadataResult> GetMetadataAsync(GetMetadataArg getMetadataArg)
        {
            return this.Transport.SendRpcRequestAsync<GetMetadataArg, GetMetadataResult, GetMetadataError>(getMetadataArg, "api", "/cloud_docs/get_metadata", "user", global::Dropbox.Api.CloudDocs.GetMetadataArg.Encoder, global::Dropbox.Api.CloudDocs.GetMetadataResult.Decoder, global::Dropbox.Api.CloudDocs.GetMetadataError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get metadata route.</para>
        /// </summary>
        /// <param name="getMetadataArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetMetadata(GetMetadataArg getMetadataArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetMetadataAsync(getMetadataArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Fetches metadata associated with a Cloud Doc and user. This route requires
        /// Cloud Docs auth. Please make a request to cloud_docs/authorize and supply that
        /// token in the Authorization header.</para>
        /// </summary>
        /// <param name="fileId">API ID ("id:...") associated with the Cloud Doc.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetMetadataError"/>.</exception>
        public t.Task<GetMetadataResult> GetMetadataAsync(string fileId = "")
        {
            var getMetadataArg = new GetMetadataArg(fileId);

            return this.GetMetadataAsync(getMetadataArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get metadata route.</para>
        /// </summary>
        /// <param name="fileId">API ID ("id:...") associated with the Cloud Doc.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetMetadata(string fileId = "",
                                                 sys.AsyncCallback callback = null,
                                                 object callbackState = null)
        {
            var getMetadataArg = new GetMetadataArg(fileId);

            return this.BeginGetMetadata(getMetadataArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get metadata route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetMetadataError"/>.</exception>
        public GetMetadataResult EndGetMetadata(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetMetadataResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Lock a Cloud Doc. This route requires Cloud Docs auth. Please make a request
        /// to cloud_docs/authorize and supply that token in the Authorization header.</para>
        /// </summary>
        /// <param name="lockArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see cref="LockingError"/>.</exception>
        public t.Task<LockResult> LockAsync(LockArg lockArg)
        {
            return this.Transport.SendRpcRequestAsync<LockArg, LockResult, LockingError>(lockArg, "api", "/cloud_docs/lock", "user", global::Dropbox.Api.CloudDocs.LockArg.Encoder, global::Dropbox.Api.CloudDocs.LockResult.Decoder, global::Dropbox.Api.CloudDocs.LockingError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the lock route.</para>
        /// </summary>
        /// <param name="lockArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLock(LockArg lockArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.LockAsync(lockArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Lock a Cloud Doc. This route requires Cloud Docs auth. Please make a request
        /// to cloud_docs/authorize and supply that token in the Authorization header.</para>
        /// </summary>
        /// <param name="fileId">The API ID ("id:...") associated with the Cloud Doc</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see cref="LockingError"/>.</exception>
        public t.Task<LockResult> LockAsync(string fileId = "")
        {
            var lockArg = new LockArg(fileId);

            return this.LockAsync(lockArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the lock route.</para>
        /// </summary>
        /// <param name="fileId">The API ID ("id:...") associated with the Cloud Doc</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginLock(string fileId = "",
                                          sys.AsyncCallback callback = null,
                                          object callbackState = null)
        {
            var lockArg = new LockArg(fileId);

            return this.BeginLock(lockArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the lock route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see cref="LockingError"/>.</exception>
        public LockResult EndLock(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<LockResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Update the title of a Cloud Doc. This route requires Cloud Docs auth. Please
        /// make a request to cloud_docs/authorize and supply that token in the Authorization
        /// header.</para>
        /// </summary>
        /// <param name="renameArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see cref="RenameError"/>.</exception>
        public t.Task<RenameResult> RenameAsync(RenameArg renameArg)
        {
            return this.Transport.SendRpcRequestAsync<RenameArg, RenameResult, RenameError>(renameArg, "api", "/cloud_docs/rename", "user", global::Dropbox.Api.CloudDocs.RenameArg.Encoder, global::Dropbox.Api.CloudDocs.RenameResult.Decoder, global::Dropbox.Api.CloudDocs.RenameError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the rename route.</para>
        /// </summary>
        /// <param name="renameArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRename(RenameArg renameArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.RenameAsync(renameArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Update the title of a Cloud Doc. This route requires Cloud Docs auth. Please
        /// make a request to cloud_docs/authorize and supply that token in the Authorization
        /// header.</para>
        /// </summary>
        /// <param name="fileId">The API ID ("id:...") associated with the Cloud Doc</param>
        /// <param name="title">The new title of the doc, excluding extension</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see cref="RenameError"/>.</exception>
        public t.Task<RenameResult> RenameAsync(string fileId = "",
                                                string title = "")
        {
            var renameArg = new RenameArg(fileId,
                                          title);

            return this.RenameAsync(renameArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the rename route.</para>
        /// </summary>
        /// <param name="fileId">The API ID ("id:...") associated with the Cloud Doc</param>
        /// <param name="title">The new title of the doc, excluding extension</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRename(string fileId = "",
                                            string title = "",
                                            sys.AsyncCallback callback = null,
                                            object callbackState = null)
        {
            var renameArg = new RenameArg(fileId,
                                          title);

            return this.BeginRename(renameArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the rename route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see cref="RenameError"/>.</exception>
        public RenameResult EndRename(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<RenameResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Unlock a Cloud Doc. This route requires Cloud Docs auth. Please make a
        /// request to cloud_docs/authorize and supply that token in the Authorization
        /// header.</para>
        /// </summary>
        /// <param name="unlockArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see cref="LockingError"/>.</exception>
        public t.Task<UnlockResult> UnlockAsync(UnlockArg unlockArg)
        {
            return this.Transport.SendRpcRequestAsync<UnlockArg, UnlockResult, LockingError>(unlockArg, "api", "/cloud_docs/unlock", "user", global::Dropbox.Api.CloudDocs.UnlockArg.Encoder, global::Dropbox.Api.CloudDocs.UnlockResult.Decoder, global::Dropbox.Api.CloudDocs.LockingError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the unlock route.</para>
        /// </summary>
        /// <param name="unlockArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUnlock(UnlockArg unlockArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UnlockAsync(unlockArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Unlock a Cloud Doc. This route requires Cloud Docs auth. Please make a
        /// request to cloud_docs/authorize and supply that token in the Authorization
        /// header.</para>
        /// </summary>
        /// <param name="fileId">The API ID ("id:...") associated with the Cloud Doc</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see cref="LockingError"/>.</exception>
        public t.Task<UnlockResult> UnlockAsync(string fileId = "")
        {
            var unlockArg = new UnlockArg(fileId);

            return this.UnlockAsync(unlockArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the unlock route.</para>
        /// </summary>
        /// <param name="fileId">The API ID ("id:...") associated with the Cloud Doc</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUnlock(string fileId = "",
                                            sys.AsyncCallback callback = null,
                                            object callbackState = null)
        {
            var unlockArg = new UnlockArg(fileId);

            return this.BeginUnlock(unlockArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the unlock route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see cref="LockingError"/>.</exception>
        public UnlockResult EndUnlock(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<UnlockResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Update the contents of a Cloud Doc. This should be called for files with a
        /// max size of 150MB. This route requires Cloud Docs auth. Please make a request to
        /// cloud_docs/authorize and supply that token in the Authorization header.</para>
        /// </summary>
        /// <param name="updateContentArg">The request parameters</param>
        /// <param name="body">The content to upload.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateContentError"/>.</exception>
        public t.Task<UpdateContentResult> UpdateContentAsync(UpdateContentArg updateContentArg, io.Stream body)
        {
            return this.Transport.SendUploadRequestAsync<UpdateContentArg, UpdateContentResult, UpdateContentError>(updateContentArg, body, "content", "/cloud_docs/update_content", "user", global::Dropbox.Api.CloudDocs.UpdateContentArg.Encoder, global::Dropbox.Api.CloudDocs.UpdateContentResult.Decoder, global::Dropbox.Api.CloudDocs.UpdateContentError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update content route.</para>
        /// </summary>
        /// <param name="updateContentArg">The request parameters.</param>
        /// <param name="body">The content to upload.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdateContent(UpdateContentArg updateContentArg, io.Stream body, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UpdateContentAsync(updateContentArg, body);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Update the contents of a Cloud Doc. This should be called for files with a
        /// max size of 150MB. This route requires Cloud Docs auth. Please make a request to
        /// cloud_docs/authorize and supply that token in the Authorization header.</para>
        /// </summary>
        /// <param name="fileId">The file id</param>
        /// <param name="actorTokens">A list of auth_tokens, one for each editor who made
        /// changes to the document since the last call to update_content.</param>
        /// <param name="additionalContents">Currently, this will always be empty until we
        /// implement upload_additional_content.</param>
        /// <param name="body">The document to upload</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateContentError"/>.</exception>
        public t.Task<UpdateContentResult> UpdateContentAsync(string fileId,
                                                              col.IEnumerable<string> actorTokens,
                                                              col.IEnumerable<Content> additionalContents = null,
                                                              io.Stream body = null)
        {
            var updateContentArg = new UpdateContentArg(fileId,
                                                        actorTokens,
                                                        additionalContents);

            return this.UpdateContentAsync(updateContentArg, body);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update content route.</para>
        /// </summary>
        /// <param name="fileId">The file id</param>
        /// <param name="actorTokens">A list of auth_tokens, one for each editor who made
        /// changes to the document since the last call to update_content.</param>
        /// <param name="additionalContents">Currently, this will always be empty until we
        /// implement upload_additional_content.</param>
        /// <param name="body">The document to upload</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdateContent(string fileId,
                                                   col.IEnumerable<string> actorTokens,
                                                   col.IEnumerable<Content> additionalContents = null,
                                                   io.Stream body = null,
                                                   sys.AsyncCallback callback = null,
                                                   object callbackState = null)
        {
            var updateContentArg = new UpdateContentArg(fileId,
                                                        actorTokens,
                                                        additionalContents);

            return this.BeginUpdateContent(updateContentArg, body, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the update content route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateContentError"/>.</exception>
        public UpdateContentResult EndUpdateContent(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<UpdateContentResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
